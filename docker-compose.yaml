services:
  api:
    build:
      context: .
      dockerfile: api/Dockerfile
      target: development
    working_dir: /app/api
    ports:
      - "9000:9000"
    env_file:
      - .env
    volumes:
      - ./api:/app/api
      - ./pkg:/app/pkg
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      pubsub:
        condition: service_started

  scheduler:
    build:
      context: .
      dockerfile: scheduler/Dockerfile
      target: development
    working_dir: /app/scheduler
    env_file:
      - .env
    volumes:
      - ./scheduler:/app/scheduler
      - ./pkg:/app/pkg
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      pubsub:
        condition: service_started

  database:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pubsub:
    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:emulators
    ports:
      - "8085:8085"
    command:
      [
        "gcloud",
        "beta",
        "emulators",
        "pubsub",
        "start",
        "--host-port=0.0.0.0:8085",
        "--project=local-project",
      ]
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8085/"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  deno-cache:
  postgres_data:
