services:
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   ports:
  #     - "1991:1991"
  #   volumes:
  #     - ./backend:/app
  #     - $HOME/.deno:/deno-dir
  #   environment:
  #     - ENV=development
  #     - DATABASE_URL=postgres://postgres:postgres@database:5432/postgres
  #     - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/service-account-key.json
  #     - PUBSUB_EMULATOR_HOST=pubsub:8085
  #   env_file:
  #     - .env
  #   restart: unless-stopped
  #   command:
  #     [
  #       "run",
  #       "--watch",
  #       "--allow-net",
  #       "--allow-read",
  #       "--allow-env",
  #       "--allow-sys",
  #       "main.ts",
  #     ]
  #   depends_on:
  #     database:
  #       condition: service_healthy
  #     pubsub:
  #       condition: service_started

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
      target: development
    working_dir: /app/api
    ports:
      - "9000:9000"
    environment:
      - ENV=development
      - PORT=9000
      - DB_HOST=database
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=postgres
      - DB_SSLMODE=disable
      - PUBSUB_PROJECT_ID=local-project
      - PUBSUB_EMULATOR_HOST=pubsub:8085
      - GOOGLE_CLIENT_ID=34932676923-luth1cmkkhoqhq3kaoealqj2poosaln4.apps.googleusercontent.com
    env_file:
      - .env
    volumes:
      - ./api:/app/api
      - ./pkg:/app/pkg
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      pubsub:
        condition: service_started

  scheduler:
    build:
      context: .
      dockerfile: scheduler/Dockerfile
      target: development
    working_dir: /app/scheduler
    environment:
      - ENV=development
      - DB_HOST=database
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=postgres
      - DB_SSLMODE=disable
      - PUBSUB_PROJECT_ID=local-project
      - PUBSUB_EMULATOR_HOST=pubsub:8085
    env_file:
      - .env
    volumes:
      - ./scheduler:/app/scheduler
      - ./pkg:/app/pkg
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      pubsub:
        condition: service_started

  database:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pubsub:
    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:emulators
    ports:
      - "8085:8085"
    command:
      [
        "gcloud",
        "beta",
        "emulators",
        "pubsub",
        "start",
        "--host-port=0.0.0.0:8085",
        "--project=local-project",
      ]
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8085/"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  deno-cache:
  postgres_data:
